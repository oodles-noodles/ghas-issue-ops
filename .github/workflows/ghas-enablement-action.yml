name: GHAS Enablement Action

on:
  workflow_call:
    inputs:
      repositories:
        required: true
        type: string
        description: 'JSON string of repositories to enable GHAS for'
      enable_secret_scanning:
        required: true
        type: boolean
        description: 'Whether to enable secret scanning'
      enable_code_scanning:
        required: true
        type: boolean
        description: 'Whether to enable code scanning'
      enable_dependabot_alerts:
        required: true
        type: boolean
        description: 'Whether to enable dependabot alerts'
      min_remaining_licenses:
        required: false
        type: number
        default: 1
        description: 'Minimum remaining licenses to maintain'
      skip_license_check:
        required: false
        type: boolean
        default: false
        description: 'Whether to skip license checking'
      dry_run:
        required: false
        type: boolean
        default: false 
        description: 'Whether to run in dry run mode (no changes will be made)'
      issue_number:
        required: true
        type: number
        description: 'Issue number that triggered the workflow'
    secrets:
      GHES_API_TOKEN_1:
        required: true
      GHES_API_TOKEN_2:
        required: false
      GH_ENTERPRISE_TOKEN_CLOUD:
        required: true


jobs:
  process-ghas-request:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix_json: ${{ steps.group_repos.outputs.matrix_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: npm install js-yaml
      
      - name: Parse config.yaml and group repositories by GHES instance
        id: group_repos
        uses: actions/github-script@v7
        with:
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            
            // Get repositories and feature flags from inputs
            const repositoriesJson = '${{ inputs.repositories }}';
            const enableSecretScanning = ${{ inputs.enable_secret_scanning }};
            const enableCodeScanning = ${{ inputs.enable_code_scanning }};
            const enableDependabotAlerts = ${{ inputs.enable_dependabot_alerts }};
            const minRemainingLicenses = ${{ inputs.min_remaining_licenses }};
            const skipLicenseCheck = ${{ inputs.skip_license_check }};
            const dryRun = ${{ inputs.dry_run }};
            
            // Use helper function to parse config and group repositories
            const matrixItems = helpers.parseConfigAndGroupRepos(
              repositoriesJson, 
              enableSecretScanning, 
              enableCodeScanning, 
              enableDependabotAlerts, 
              minRemainingLicenses
            );
            
            // Add skipLicenseCheck and dryRun to each matrix item
            matrixItems.forEach(item => {
              item.skip_license_check = skipLicenseCheck;
              item.dry_run = dryRun;
            });
            
            // Save the matrix JSON for the next job
            core.setOutput('matrix_json', JSON.stringify(matrixItems));

  enable-ghas-for-instances:
    needs: process-ghas-request
    runs-on: ubuntu-latest
    permissions:
      issues: write
    strategy:
      matrix:
        include: ${{ fromJson(needs.process-ghas-request.outputs.matrix_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: npm install js-yaml
      
      - name: Check license availability
        id: check_licenses
        uses: actions/github-script@v7
        env:
          ENTERPRISE_URL: ${{ matrix.api_url }}
          ENTERPRISE_NAME: ${{ matrix.instance_name }}
          MIN_REMAINING_LICENSES: ${{ matrix.min_remaining_licenses }}
          AUTH_VAR: ${{ matrix.auth_var }}
          GH_ENTERPRISE_TOKEN: ${{ secrets[matrix.auth_var] }}
          GH_ENTERPRISE_TOKEN_CLOUD: ${{ secrets.GH_ENTERPRISE_TOKEN_CLOUD }}
        with:
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            
            // Check if we should skip the license check
            const skipCheck = ${{ matrix.skip_license_check }};
            console.log(`Skip license check: ${skipCheck ? 'Yes' : 'No'}`);
            
            // Check if this is a dry run
            const dryRun = ${{ matrix.dry_run }};
            if (dryRun) {
              console.log('🔍 DRY RUN MODE: Yes');
              console.log('=======================================');
              console.log('🚨 ATTENTION: This is a DRY RUN 🚨');
              console.log('No changes will be applied to repositories');
              console.log('This run will only analyze and report what would happen');
              console.log('=======================================');
            } else {
              console.log('Dry run mode: No - Changes WILL be applied');
            }
            
            // Get the list of repositories to check for license impact
            const repositories = ${{ toJson(matrix.repositories) }};
            
            // Use improved helper function that handles skipping internally and performs committer analysis
            const licenseInfo = helpers.checkLicenseAvailability(process.env, skipCheck, repositories);
            
            // Create a license info object for sharing with subsequent steps
            const licenseInfoForSharing = {
              availableLicenses: licenseInfo.availableLicenses,
              totalLicenses: licenseInfo.totalLicenses,
              usedLicenses: licenseInfo.usedLicenses,
              newCommitters: licenseInfo.newCommitters || 0,
              estimatedLicensesNeeded: licenseInfo.estimatedLicensesNeeded || 0,
              hasEnoughLicenses: licenseInfo.hasEnoughLicenses,
              skipLicenseCheck: licenseInfo.skipLicenseCheck
            };
            
            // Pass the newCommittersList if available
            if (licenseInfo.newCommittersList) {
              licenseInfoForSharing.newCommittersList = licenseInfo.newCommittersList;
            }
            
            // Store the license info for the update_issue step
            core.exportVariable('LICENSE_INFO_JSON', JSON.stringify(licenseInfoForSharing));
            
            // Set outputs for use in later steps
            core.setOutput('available_licenses', licenseInfo.availableLicenses);
            core.setOutput('total_licenses', licenseInfo.totalLicenses);
            core.setOutput('used_licenses', licenseInfo.usedLicenses);
            core.setOutput('new_committers', licenseInfo.newCommitters);
            core.setOutput('estimated_licenses_needed', licenseInfo.estimatedLicensesNeeded);
            core.setOutput('has_enough_licenses', licenseInfo.hasEnoughLicenses.toString());
            core.setOutput('skip_license_check', licenseInfo.skipLicenseCheck);
            // We stringified the boolean value to ensure consistent type matching in conditions
            core.setOutput('dry_run', dryRun ? 'true' : 'false');
            
            // Output the list of new committers if available
            if (licenseInfo.newCommittersList && licenseInfo.newCommittersList.length > 0) {
              core.setOutput('new_committers_list', JSON.stringify(licenseInfo.newCommittersList));
            }
      
      # Display a message when in dry run mode
      - name: Dry Run Mode - No Changes
        id: dry_run_mode
        if: steps.check_licenses.outputs.has_enough_licenses == 'true' && steps.check_licenses.outputs.dry_run == 'true'
        env:
          ENTERPRISE_URL: ${{ matrix.api_url }}
          REPOSITORIES: ${{ toJson(matrix.repositories) }}
        run: |
          echo "🔍 DRY RUN MODE ACTIVE: No changes will be made to repositories. This is only a simulation."
          export GH_ENTERPRISE_TOKEN="${{ secrets[matrix.auth_var] }}"
          
          # Extract hostname from ENTERPRISE_URL for GitHub CLI
          HOSTNAME=$(echo $ENTERPRISE_URL | sed -E 's|https?://([^/]+)/.*|\1|' | sed 's/api\.//')
          echo "Using hostname: $HOSTNAME"
          
          # Create files to track valid and invalid repositories
          echo "[]" > valid_repos.json
          echo "[]" > invalid_repos.json
          
          # Process each repository but don't make any changes
          repos=$(echo $REPOSITORIES | jq -r '.[]')
          
          for repo in $repos; do
            if [ -n "$repo" ]; then
              echo "Analyzing repository: $repo"
              # Extract the org and repo_name from the URL path
              repo_path=$(echo "$repo" | sed -E 's|https?://[^/]+/(.+)|\1|')
              IFS='/' read -r org repo_name <<< "$repo_path"
              
              # Validate that we have both org and repo_name
              if [[ -z "$org" || -z "$repo_name" ]]; then
                echo "Error: Could not extract organization and repository name from $repo"
                # Add to invalid repos list
                error_msg="Could not extract organization and repository name from URL"
                invalid_repo=$(jq -n --arg url "$repo" --arg error "$error_msg" '{url: $url, error: $error}')
                jq --argjson item "$invalid_repo" '. += [$item]' invalid_repos.json > temp.json && mv temp.json invalid_repos.json
                continue
              fi
              
              # Try to get repository info - this is similar to what would happen during enablement
              # But we don't make any changes in dry run mode
              echo "Checking repository details: $repo"
              if ! repo_info=$(gh api -H "Accept: application/vnd.github+json" "/repos/$org/$repo_name" \
                --hostname $HOSTNAME 2>/dev/null); then
                echo "Error: Repository not found or not accessible: $repo"
                # Add to invalid repos list
                error_msg="Repository not found or not accessible. Please verify the URL and your permissions."
                invalid_repo=$(jq -n --arg url "$repo" --arg error "$error_msg" '{url: $url, error: $error}')
                jq --argjson item "$invalid_repo" '. += [$item]' invalid_repos.json > temp.json && mv temp.json invalid_repos.json
                continue
              fi
              
              # Repository exists and is accessible
              jq --arg repo "$repo" '. += [$repo]' valid_repos.json > temp.json && mv temp.json valid_repos.json
              echo "Repository $repo is accessible"
            fi
          done
          
          # Store valid and invalid repos for reporting
          valid_repos=$(cat valid_repos.json | tr -d '\n')
          invalid_repos=$(cat invalid_repos.json | tr -d '\n')
          echo "valid_repos=${valid_repos}" >> $GITHUB_OUTPUT
          echo "invalid_repos=${invalid_repos}" >> $GITHUB_OUTPUT
          
          # Print summary
          valid_count=$(jq '. | length' valid_repos.json)
          invalid_count=$(jq '. | length' invalid_repos.json)
          echo "-----------------------------------"
          echo "Dry Run Analysis Summary:"
          echo "- Valid repositories: $valid_count"
          echo "- Invalid repositories: $invalid_count"
          echo "-----------------------------------"
          echo "✅ Dry run analysis complete"
        
      # This step will be skipped in dry run mode
      - name: Enable GHAS Features
        id: enable_features
        if: steps.check_licenses.outputs.has_enough_licenses == 'true' && steps.check_licenses.outputs.dry_run != 'true'
        env:
          ENTERPRISE_URL: ${{ matrix.api_url }}
          REPOSITORIES: ${{ toJson(matrix.repositories) }}
          ENABLE_SECRET_SCANNING: ${{ matrix.enable_secret_scanning }}
          ENABLE_CODE_SCANNING: ${{ matrix.enable_code_scanning }}
          ENABLE_DEPENDABOT_ALERTS: ${{ matrix.enable_dependabot_alerts }}
          MIN_REMAINING_LICENSES: ${{ matrix.min_remaining_licenses }}
        run: |
          export GH_ENTERPRISE_TOKEN="${{ secrets[matrix.auth_var] }}"
          if [[ "$ENABLE_SECRET_SCANNING" != "true" && "$ENABLE_CODE_SCANNING" != "true" && "$ENABLE_DEPENDABOT_ALERTS" != "true" ]]; then
            echo "No GHAS features selected for enablement"
            exit 0
          fi
          
          echo "Enabling selected GHAS features for repositories"
          # Extract hostname from ENTERPRISE_URL for GitHub CLI
          HOSTNAME=$(echo $ENTERPRISE_URL | sed -E 's|https?://([^/]+)/.*|\1|' | sed 's/api\.//')
          echo "Using hostname: $HOSTNAME"
          
          # Create files to track valid, invalid and enabled repositories
          echo "[]" > valid_repos.json
          echo "[]" > invalid_repos.json
          enabled_repos=()
          
          repos=$(echo $REPOSITORIES | jq -r '.[]')
          
          for repo in $repos; do
            if [ -n "$repo" ]; then
              echo "Processing repository: $repo"
              # Extract the org and repo_name from the URL path
              # Format: https://hostname/org/repo or http://hostname/org/repo
              repo_path=$(echo "$repo" | sed -E 's|https?://[^/]+/(.+)|\1|')
              IFS='/' read -r org repo_name <<< "$repo_path"
              
              # Validate repository URL format
              if [[ -z "$org" || -z "$repo_name" ]]; then
                echo "Error: Could not extract organization and repository name from $repo"
                # Add to invalid repos list
                error_msg="Could not extract organization and repository name from URL"
                invalid_repo=$(jq -n --arg url "$repo" --arg error "$error_msg" '{url: $url, error: $error}')
                jq --argjson item "$invalid_repo" '. += [$item]' invalid_repos.json > temp.json && mv temp.json invalid_repos.json
                continue
              fi
              
              # Attempt to directly enable Advanced Security
              # This also serves as a check if the repository exists and is accessible
              echo "Attempting to enable Advanced Security for $repo"
              if ! enable_response=$(echo '{"security_and_analysis":{"advanced_security":{"status":"enabled"}}}' | \
                gh api -X PATCH -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" "/repos/$org/$repo_name" \
                --hostname $HOSTNAME --input - 2>&1); then
                
                # If the API call failed, capture the error
                echo "Error: Failed to enable Advanced Security for $repo"
                
                # Try to determine the specific error
                if [[ "$enable_response" == *"404"* || "$enable_response" == *"Not Found"* ]]; then
                  error_msg="Repository not found. Please verify the URL and your permissions."
                elif [[ "$enable_response" == *"403"* || "$enable_response" == *"Forbidden"* ]]; then
                  error_msg="Access denied. You don't have permission to enable GHAS for this repository."
                elif [[ "$enable_response" == *"422"* ]]; then
                  error_msg="Validation failed. Repository may not be eligible for GHAS features."
                else
                  error_msg="Failed to enable Advanced Security: $enable_response"
                fi
                
                # Add to invalid repos list
                invalid_repo=$(jq -n --arg url "$repo" --arg error "$error_msg" '{url: $url, error: $error}')
                jq --argjson item "$invalid_repo" '. += [$item]' invalid_repos.json > temp.json && mv temp.json invalid_repos.json
                continue
              fi
              
              # Add to valid repos list
              jq --arg repo "$repo" '. += [$repo]' valid_repos.json > temp.json && mv temp.json valid_repos.json
              
              echo "Advanced Security has been enabled for $repo"
              
              # Attempt to enable Code Scanning if selected
              if [[ "$ENABLE_CODE_SCANNING" == "true" ]]; then
                echo "Enabling Code Scanning with default setup for $repo"
                if ! code_scan_response=$(echo '{"state":"configured"}' | \
                  gh api -X PUT -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" \
                  "/repos/$org/$repo_name/code-scanning/default-setup" \
                  --hostname $HOSTNAME --input - 2>&1); then
                  
                  echo "Warning: Failed to enable Code Scanning for $repo: $code_scan_response"
                  # We don't fail the whole repository here, just log a warning
                  # This allows partial success for repositories
                fi
                
                # Default setup enables Secret Scanning too, so we can skip it
                enabled_repos+=("$repo")
                continue
              fi
              
              # Enable Secret Scanning if selected (and not using default setup)
              if [[ "$ENABLE_SECRET_SCANNING" == "true" ]]; then
                echo "Enabling Secret Scanning for $repo"
                if ! secret_scan_response=$(echo '{"security_and_analysis":{"secret_scanning":{"status":"enabled"}}}' | \
                  gh api -X PATCH -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" \
                  "/repos/$org/$repo_name" --hostname $HOSTNAME --input - 2>&1); then
                  
                  echo "Warning: Failed to enable Secret Scanning for $repo: $secret_scan_response"
                  # Log warning but continue with other features
                fi
              fi
              
              # Enable Dependabot Alerts if selected
              if [[ "$ENABLE_DEPENDABOT_ALERTS" == "true" ]]; then
                echo "Enabling Dependabot Alerts for $repo"
                if ! dependabot_response=$(echo '{"security_and_analysis":{"vulnerability_alerts":{"status":"enabled"}}}' | \
                  gh api -X PATCH -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" \
                  "/repos/$org/$repo_name" --hostname $HOSTNAME --input - 2>&1); then
                  
                  echo "Warning: Failed to enable Dependabot Alerts for $repo: $dependabot_response"
                  # Log warning but continue
                fi
              fi
              
              enabled_repos+=("$repo")
              echo "GHAS features enabled for $repo"
            fi
          done
          
          # Store enabled and invalid repos for reporting
          echo "enabled_repos=$(echo "${enabled_repos[@]}" | jq -R -s -c 'split(" ")')" >> $GITHUB_OUTPUT
          invalid_repos=$(cat invalid_repos.json | tr -d '\n')
          echo "invalid_repos=${invalid_repos}" >> $GITHUB_OUTPUT
          
          # Print summary
          echo "-----------------------------------"
          echo "Enablement Summary:"
          echo "- Successfully enabled: ${#enabled_repos[@]} repositories"
          invalid_count=$(jq '. | length' invalid_repos.json)
          echo "- Failed: $invalid_count repositories"
          echo "-----------------------------------"
      
      - name: Update issue with results
        id: update_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            
            // All license check information comes from single step now
            const hasEnoughLicenses = '${{ steps.check_licenses.outputs.has_enough_licenses }}' === 'true';
            const skipLicenseCheck = '${{ steps.check_licenses.outputs.skip_license_check }}' === 'true';
            const dryRun = '${{ steps.check_licenses.outputs.dry_run }}' === 'true';
            
            // Parse issue body to identify original inputs for better context
            // Use GitHub API to fetch issue body since the issue_number is passed as input
            const issueNumber = ${{ inputs.issue_number }};
            console.log(`Fetching issue #${issueNumber} for context`);
            
            const issue = await github.rest.issues.get({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const parsedData = helpers.parseIssueBody(issue.data.body);
            const originalRepos = parsedData.repositories;
            
            // Get the current hostname for filtering
            const currentHostname = "${{ matrix.hostname }}";
            
            // Identify which inputs were org URLs and filter to only those for this enterprise
            const orgUrls = originalRepos.filter(url => {
              try {
                // Check if it's an org URL
                if (helpers.isOrganizationUrl(url)) {
                  // Extract hostname and check if it matches current enterprise
                  const urlObj = new URL(url);
                  return urlObj.hostname === currentHostname;
                }
                return false;
              } catch (error) {
                console.error(`Invalid URL: ${url}`, error.message);
                return false;
              }
            });
            
            console.log(`Found ${orgUrls.length} organization URLs for hostname ${currentHostname}`);
            
            // Get invalid repositories data if available
            let invalidRepositoriesData = null;
            const enableFeaturesOutput = '${{ steps.enable_features.outputs.invalid_repos }}';
            const dryRunModeOutput = '${{ steps.dry_run_mode.outputs.invalid_repos }}';
            
            if (enableFeaturesOutput && enableFeaturesOutput !== '') {
              try {
                console.log('Attempting to parse enable_features invalid_repos output');
                // Parse invalid repositories from the enable_features output
                // First check if it's already a string representation of valid JSON
                if (enableFeaturesOutput.startsWith('[') && enableFeaturesOutput.endsWith(']')) {
                  // It appears to be a JSON array already
                  invalidRepositoriesData = JSON.parse(enableFeaturesOutput);
                } else {
                  // Otherwise it might need additional processing
                  console.log('Output does not appear to be a direct JSON array');
                  // Try to extract what looks like JSON
                  const jsonMatch = enableFeaturesOutput.match(/\[.*\]/s);
                  if (jsonMatch) {
                    invalidRepositoriesData = JSON.parse(jsonMatch[0]);
                  } else {
                    console.error('Could not find JSON array in output');
                  }
                }
                
                if (invalidRepositoriesData) {
                  console.log(`Found ${invalidRepositoriesData.length} invalid repositories from enable_features`);
                }
              } catch (error) {
                console.error('Error parsing invalid repositories from enable_features:', error.message);
                console.error('Raw output:', enableFeaturesOutput);
              }
            } else if (dryRun && dryRunModeOutput && dryRunModeOutput !== '') {
              try {
                console.log('Attempting to parse dry_run_mode invalid_repos output');
                // Parse invalid repositories from the dry_run_mode output
                // First check if it's already a string representation of valid JSON
                if (dryRunModeOutput.startsWith('[') && dryRunModeOutput.endsWith(']')) {
                  // It appears to be a JSON array already
                  invalidRepositoriesData = JSON.parse(dryRunModeOutput);
                } else {
                  // Otherwise it might need additional processing
                  console.log('Output does not appear to be a direct JSON array');
                  // Try to extract what looks like JSON
                  const jsonMatch = dryRunModeOutput.match(/\[.*\]/s);
                  if (jsonMatch) {
                    invalidRepositoriesData = JSON.parse(jsonMatch[0]);
                  } else {
                    console.error('Could not find JSON array in output');
                  }
                }
                
                if (invalidRepositoriesData) {
                  console.log(`Found ${invalidRepositoriesData.length} invalid repositories from dry_run_mode`);
                }
              } catch (error) {
                console.error('Error parsing invalid repositories from dry_run_mode:', error.message);
                console.error('Raw output:', dryRunModeOutput);
              }
            } else {
              console.log('No invalid repositories data');
            }
            
            // Prepare parameters for comment creation
            const params = {
              enableSecretScanning: ${{ matrix.enable_secret_scanning }},
              enableCodeScanning: ${{ matrix.enable_code_scanning }},
              enableDependabotAlerts: ${{ matrix.enable_dependabot_alerts }},
              repositories: ${{ toJson(matrix.repositories) }},
              hasEnoughLicenses: hasEnoughLicenses,
              availableLicenses: parseInt('${{ steps.check_licenses.outputs.available_licenses || 0 }}'),
              totalLicenses: parseInt('${{ steps.check_licenses.outputs.total_licenses || 0 }}'),
              usedLicenses: parseInt('${{ steps.check_licenses.outputs.used_licenses || 0 }}'),
              newCommitters: parseInt('${{ steps.check_licenses.outputs.new_committers || 0 }}'),
              estimatedLicensesNeeded: parseInt('${{ steps.check_licenses.outputs.estimated_licenses_needed || 0 }}'),
              skipLicenseCheck: skipLicenseCheck,
              minRemainingLicenses: ${{ matrix.min_remaining_licenses }},
              hostname: currentHostname,
              instanceName: '${{ matrix.instance_name }}',
              dryRun: dryRun
            };
            
            // Add invalid repositories to params if any were detected
            if (invalidRepositoriesData && invalidRepositoriesData.length > 0) {
              params.invalidRepositories = invalidRepositoriesData;
            }
            
            // Add new committers list if available
            const newCommittersListStr = '${{ steps.check_licenses.outputs.new_committers_list }}';
            if (newCommittersListStr) {
              try {
                params.newCommittersList = JSON.parse(newCommittersListStr);
              } catch (error) {
                console.error('Error parsing new committers list:', error.message);
              }
            }
            
            // Add filtered org URLs to params if any were detected
            if (orgUrls.length > 0) {
              params.organizationUrls = orgUrls;
            }
            
            // Create comment text
            const comment = helpers.createResultsComment(params);
            
            // Post comment to the issue
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            // If not enough licenses, exit early
            if (!params.hasEnoughLicenses) {
              return;
            }
